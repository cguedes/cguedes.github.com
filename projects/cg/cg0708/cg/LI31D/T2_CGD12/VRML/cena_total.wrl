#VRML V2.0 utf8

#centro do ecran: canto inferior esquerdo
EXTERNPROTO	EcranTotal[]
["ecran_total.wrl#EcranTotal"]

#centro dos trocos: ao centro no topo da caixa dos trocos
EXTERNPROTO	TrocosTotal[]
["trocos_total.wrl#TrocosTotal"]

#incluir maquina
EXTERNPROTO	maquina[]
["maquina.wrl#maquina"]



#parede verde onde a maquina vai ficar pendurada
PROTO ParedeVerde [ field SFVec3f posicao 0 0 0 ]
{
	Transform {
		children Shape { geometry Box { size 1.00 2.00 0.50 }
			#cor em RGB 110 130 130	-> 0.431 0.509 0.509
			appearance Appearance {
			material Material { diffuseColor 0.431 0.509 0.509 }
			texture ImageTexture { 				
				url "parede_verde.png"
				}
			textureTransform TextureTransform {
			          scale 6 6			          
			        } 			
			}
			
			}			
	translation IS posicao
	}
}

#chao onde parede esta assenta
PROTO ChaoBege [ field SFVec3f posicao 0 0 0 ]
{
	Transform {
		children Shape { geometry Box { size 5.00 0.10 5.00 }
			#cor em RGB 150 150 130 -> 0.588 0.588 0.509
			appearance Appearance {
			material Material { diffuseColor 0.588 0.588 0.509 }
			texture ImageTexture { 				
				url "floor2.jpg"
				} 
			textureTransform TextureTransform {
			          scale 3 3			         
			        }
			}
			}		
	translation IS posicao
	}
}


#cena com tudo
# centro da cena: vertice onde chao e parede se encontram, a esquerda atras da parede
PROTO Cena []
{
	Transform {
		children [
		
			ChaoBege { posicao 2.50 -0.05 2.50 }			
			
			ParedeVerde { posicao 0.50 1.00 0.25 }
			
			
			# posicao do resto da maquina com scale
			Transform { 
				scale 0.01 0.01 0.01				
				translation 0.250 0.5 0.72
				children maquina {}
			}		
			
			# sem luz no capacete
			NavigationInfo { headlight FALSE }
									
			#4 views
							
			#de lado em perspectiva				
			Viewpoint {  
				fieldOfView 0.785398 
				position 2.50 1 2.50 
				orientation 0 1 0 0.785 # angulo de 45 graus em torno do y
				description "view1" 
				jump TRUE 	
			}  
			
			# de frente para a maquina
			Viewpoint {  
				fieldOfView 0.785398 
				position 0.475 0.965 2 
				orientation 0 0 1 0 
				description "view2" 
				jump TRUE 	
			}
			
			#de frente para o ecran
			Viewpoint {  
				fieldOfView 0.785398 
				position 0.475 1.065 1.1 
				orientation 0 0 1 0 
				description "view3" 
				jump TRUE 	
			}
			
			#de frente para os trocos
			Viewpoint {  
				fieldOfView 0.785398 
				position 0.475 0.565 1 
				orientation 0 0 1 0 
				description "view4" 
				jump TRUE 	
			}
												
		]	
	}
}



#botao de HUD para comutar entre dia e noite
PROTO HUDButton [ exposedField SFVec3f translation 0 0 0
	exposedField SFColor color 0.4 0.4 0.0
	eventOut SFTime touchTime 
]
{
	Transform { 
    	translation IS translation
    	children [
    		#DEF TSLuz TouchSensor { touchTime IS touchTime}
    		Shape {
      			geometry Box {size 0.01 0.01 0.001}
      			appearance Appearance { material Material {
						emissiveColor IS color 
						transparency .4
								}
						texture ImageTexture { 							
							url "hud_button.png"
							}				
					
					}
    		}
  		]
	}
}

#sensor de proximidade para manter botao de hud no mesmo sitio em relacao a view
DEF PROXY ProximitySensor {size 10000 10000 10000}

Collision {
	collide	FALSE
	children
	DEF	HUD Transform	{
		children [			
			HUDButton {translation -0.06  -0.035 -0.1}
			DEF TSLuz TouchSensor { }
		]
	}
}

ROUTE PROXY.orientation_changed TO HUD.rotation
ROUTE PROXY.position_changed TO HUD.translation
#ROUTE PROXY.position_changed TO PROXY.center

#---------------------------
Cena {}
#---------------------------

	
#grupo com 4 luzes 
Group {
	children [						

# duas pontuais para simular dia, 2 para simular entrada do sol e reflexoes
DEF luzD1 PointLight {
	location 3.0 2.5 3.0 
	intensity 0.9
	color 1.0 1.0 1.0
	} 

DEF luzD2 PointLight {
	location 3.0 2.5 3.0 
	intensity 0.9
	color 1.0 1.0 1.0
	} 

# duas pontuais para simular noite, 2 luzes imaginarias mais proximas	
DEF luzN1 PointLight {
	location 3.0 3.0 3.0 
	intensity 0
	color 0.8 0.8 0.8
	}

DEF luzN2 PointLight {
	location -3.0 3.0 3.0 
	intensity 0
	color 0.8 0.8 0.8
	}
]
}



#som a ser tocado num clique
Sound { 
	source DEF ac2 AudioClip { 
	             loop FALSE 
	             url "mouse_click.wav"
	   } 				
}



#script para trocar luzes
  DEF LuzScript Script {
   eventIn SFBool clicked
   eventOut SFFloat luzes_dia
   eventOut SFFloat luzes_noite
   field SFBool dia_noite FALSE
   url "vrmlscript:
    function initialize() {
     
    }
    function clicked(value) {
     if (value) {
      //only when isActive is true      
      
      if(dia_noite){	      	
	      	luzes_dia = 0.9;
	      	luzes_noite = 0;
      	}else{	      	
	      	luzes_dia = 0;
	      	luzes_noite = 0.8;      	
      	}
      	dia_noite=!dia_noite;      
     }
    }"
   }


# quando clique em dia/noite da som
ROUTE TSLuz.touchTime TO ac2.set_startTime # tocar som

ROUTE TSLuz.isActive TO LuzScript.clicked

#afectara intensidade das 4 luzes
ROUTE LuzScript.luzes_dia TO luzD1.set_intensity
ROUTE LuzScript.luzes_dia TO luzD2.set_intensity
ROUTE LuzScript.luzes_noite TO luzN1.set_intensity
ROUTE LuzScript.luzes_noite TO luzN2.set_intensity