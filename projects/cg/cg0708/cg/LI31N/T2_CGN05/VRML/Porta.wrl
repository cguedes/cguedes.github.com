#VRML V2.0 utf8

EXTERNPROTO	Axis [

]
"Axis1.wrl#Axis"

# Porta que tem rotação
PROTO PortaQAbre [
	field SFVec3f translation 0 0 0
	field	SFBool temPuxador FALSE
	# Sentido de rotação de acordo com o centro da porta
	field SFInt32 sentidoRotacao -1
	eventOut SFBool	portaAbriu
	eventIn SFBool enableOpening
	field SFBool 	canOpening TRUE
	exposedField SFRotation rotation 0 0 1 0
	field SFVec3f center 0 0 0
	field SFNode cor NULL
]{
	Group {
		children [
			# Textura da porta
			DEF	materialPorta Appearance {
				material Material {
					diffuseColor 238 44 44 
				}
				texture	ImageTexture {
					url	[
						"Porta.jpg"
					]
				}
				textureTransform TextureTransform {
					scale 1 1
				}
			}
			# eixo segundo o qual a porta sofre a rotação
			DEF RotacaoPorta Transform {
				center IS center
				translation	IS translation
				rotation IS	rotation
				children [
					# Sensor de toque
					DEF	TouchStart TouchSensor	{
						enabled	IS canOpening
					}
					# Timer associado ao movimento
					DEF Timer1 TimeSensor{
						cycleInterval 3 
						loop FALSE
					}		 
					# Script ligado ao movimento da porta
					DEF	OpenDoor Script	{
						field SFBool isOpen FALSE
						field SFBool canOpen IS	canOpening
						field SFInt32 rotacao IS sentidoRotacao
						eventIn	SFBool set_Open IS enableOpening
						eventIn	SFFloat	set_fraction
						eventOut SFRotation	value_changed
						eventOut SFBool	opendoor_changed IS	portaAbriu
						eventOut SFBool	canOpenDoor
						url	"javascript:	
						function set_fraction(frac, timestamp){
							if( isOpen == TRUE ){
								opendoor_changed = FALSE;
								value_changed[0] = 0;
								value_changed[1] = 1;
								value_changed[2] = 0;
								value_changed[3] = (1 - frac) * 1.57 * rotacao ;
								if( frac == 1){
									isOpen = FALSE;
									opendoor_changed = isOpen;
								}
								return;
							}
							value_changed[0] = 0;
							value_changed[1] = 1;
							value_changed[2] = 0;
							value_changed[3] = frac * 1.57 * rotacao ;
							if( frac == 1){
								isOpen = TRUE;
								opendoor_changed = isOpen;
							}
						}
						// Se a porta pode ser aberta
						// Caso não possa ser aberta é desligado o sensor associado a porta
						function set_Open( set, timestamp){
							canOpen = set;
							canOpenDoor=canOpen;
						}
						"
					}

					# Forma geometrica basica da porta
					Shape {
						geometry Box {
							size 109.9 199 4
						}
						appearance USE materialPorta
					}
					 
					# algoritmo para criar puxadores de acordo com o parametro tem puxador
					# Puxador é criado para ambos os lados da porta
					DEF	CriarPuxadores Script	{
						# Nó onde vai ser inserido o puxador
						field SFNode addedObject USE RotacaoPorta 
						field MFNode tempNode []
						field SFString str ""
						# Tem puxador ?
						field SFBool hasPush IS	temPuxador
						field SFNode timer USE Timer1
						field SFNode door USE OpenDoor
						
						directOutput FALSE
						url	"vrmlscript:
							function initialize () {	 
								if( hasPush == FALSE ) return;
								str+= 'EXTERNPROTO Puxador  [ field SFVec3f translation field SFRotation rotation ';
								str+= ' field SFVec3f scale field SFBool ccw field SFBool doorOpened  ';
								str+= ' eventIn SFBool portaAberta eventIn	SFFloat	puxin ';
								str+= '] \"Puxador.wrl#Puxador\" DEF pux1 Puxador { translation 50 -5 2 }';
								str+= 'DEF pux2 Puxador	{ translation	50 -5 -2 scale 1 1 -1 ccw TRUE }';
								tempNode = Browser.createVrmlFromString(str);
								addedObject.addChildren = tempNode;
								// Definiçao das ligações entre os puxadores e o timer para que estes rodem também
								//	ROUTE Timer1.fraction_changed TO pux1.puxin
								Browser.addRoute(timer , 'fraction_changed', tempNode[0], 'puxin');
								//	ROUTE Timer1.fraction_changed TO pux2.puxin
								Browser.addRoute(timer , 'fraction_changed', tempNode[1], 'puxin');
								//	ROUTE OpenDoor.opendoor_changed	TO pux1.portaAberta
								Browser.addRoute(door , 'opendoor_changed', tempNode[0], 'portaAberta');
								//	ROUTE OpenDoor.opendoor_changed	TO pux2.portaAberta
								Browser.addRoute(door , 'opendoor_changed', tempNode[1], 'portaAberta');
							}

						"
					}
				]
			}
		]
	}
	# Ligação entre o sensor e o timer
	ROUTE TouchStart.touchTime TO Timer1.startTime
	# Ligação entre o timer e o script que movimenta a porta
	ROUTE Timer1.fraction_changed TO OpenDoor.set_fraction
	# Ligação entre o script e o nó da rotaçao
	ROUTE OpenDoor.value_changed TO RotacaoPorta.rotation
	# Activa ou desactiva o sensor de toque de acordo com a variavel canOpenDoor
	ROUTE OpenDoor.canOpenDoor TO TouchStart.enabled
}

PROTO Porta [
	field SFVec3f translation 0 0 0
	field SFNode corOmbreira NULL
]{
	Transform {
		translation	IS translation
		children [
			# Definição da ombreira da porta
			Transform {
				translation	-1 0 0
				children
				Shape {
					geometry Extrusion {
						crossSection [1 0,11 0,11 199,231 199,231 0,241 0,241 209,1 209,1 0]
						spine [0 0 0, 0 0 -17]
						ccw FALSE
						beginCap TRUE
						endCap TRUE
						orientation	0 0 1 0
					}
					appearance IS corOmbreira
				}
			}
			# Criação das duas portas que abrem que compõem esta porta
			DEF p1 PortaQAbre{
				translation	65 99.5 -4
				center  -55 99.5 2
				temPuxador TRUE
				canOpening TRUE
			}
			DEF p2 PortaQAbre{
				translation	175 99.5 -4
				center 55 99.5 2
				temPuxador FALSE
				sentidoRotacao 1
				canOpening FALSE
				# Esta porta so abre quando a outra estiver completamente aberta
				# Ligação entre ambas as portas
				ROUTE p1.portaAbriu	TO p2.enableOpening
			}
		]
	}
}

Porta {

}
