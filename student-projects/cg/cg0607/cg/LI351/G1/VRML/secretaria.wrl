#VRML V2.0 utf8

EXTERNPROTO paredeL1 [ field SFColor cor ] "paredeL1.wrl#paredeL1"
EXTERNPROTO paredeL2 [ field SFColor cor ] "paredeL2.wrl#paredeL2"
EXTERNPROTO paredeL3 [ field SFColor cor ] "paredeL3.wrl#paredeL3"
EXTERNPROTO paredeL4 [ field SFColor cor ] "paredeL4.wrl#paredeL4"
EXTERNPROTO tecto	 [ ] "tecto.wrl#tecto"
EXTERNPROTO	mesa	 [ ] "mesa.wrl#mesa"
EXTERNPROTO L1_portaVidro [ ] "paredeL1.wrl#L1_portaVidro"
 

#--------------------------------------------------------------------
#Define o tipo de navegação (STUDY)
NavigationInfo{
	#type "EXAMINE"
	type ["WALK"]
}

#Define ponto de vista inicial
Viewpoint {
   position 13 1 -9
   orientation 0 1 0 -3.70
   description "Visao diagonal"
}
#--------------------------------------------------------------------
 


########################################################################
# Ambiente (fundo e céu)
########################################################################
Background {
    skyColor [
        0.0 0.2 0.7,
        0.0 0.5 1.0,
        1.0 1.0 1.0
    ]
    skyAngle [ 1.309, 1.571 ]
    groundColor [
        0.1 0.10 0.0,
        0.4 0.25 0.2,
        0.6 0.60 0.6,
    ]
    groundAngle [ 1.309, 1.571 ]
}




Group {
	children[
		#paredeL1 (lado da porta)
		paredeL1 { cor 1 .9 .61},
	
		#porta de vidro (porta de entrada)
		DEF porta Transform {
			translation	9.125 0 0
			children [
    			L1_portaVidro { }
				DEF TouchPorta TouchSensor { }
			]
		},
		
		#paredeL2 (lado da janela)
		Transform {
			rotation 0 1 0 -1.57
			translation	-0.19 0 0
			children
				paredeL2 { cor 1 .9 .61}
		},
		#paredeL3 (lado oposto à parede da porta)
		Transform {
			translation	0 0 2.71
			children
				paredeL3 { cor 1 .9 .61}
		},
		#paredeL4 (lado oposto à parede da janela)
		Transform {
			rotation 0 1 0 -1.57
			translation	11.59 0 -0.19					#desloc em xx = 11.40m + 0.19 (expessura parede)
			children
				paredeL4 { cor 1 .9 .61}
		},
		#chao
		Transform  {
			#ajustar o chao a localizacao das paredes (desloc em 'xx e em 'zz)
			translation 5.605 0 1.355		#xx:(5.605=11.59/2-0.19) zz:(1.355=3.09/2-0.19)
			children
			Shape {
    			geometry Box {
    			  size 11.59 0.01 3.09		#(11.59 = 11.40+0.19) (3.09 = 2.71+0.19+0.19)
    			}
    			appearance Appearance {
    				material Material {diffuseColor 1 .9 .61}
    			}
			}
		},
		#tecto
		tecto {},								#PROTO "tecto" ja contem a armacao das luzes
		#mesas
		Group {
			children [
				Transform {
					rotation 0 1 0 -1.57
					translation	8.1 0 0.85
					children
					mesa {}
				},
				Transform {
					rotation 0 1 0 -1.57
					translation	6.5 0 0.85
					children
					mesa {}
				},
				Transform {
					rotation 0 1 0 -1.57
					translation	4.9 0 0.85
					children
					mesa {}
				},
				Transform {
					rotation 0 1 0 -1.57
					translation	3.3 0 0.85
					children
					mesa {}
				},
				Transform {
					rotation 0 1 0 -1.57
					translation	1.7 0 0.85
					children
					mesa {}
				}
			]
		}
	]
}


#########################################################################
#					ABRIR/FECHAR PORTA DE VIDRO							#
#########################################################################

DEF timerAbrirPorta TimeSensor {
    cycleInterval 2 							#Demora 2 segundos a abrir a porta
	loop FALSE
}

DEF timerFecharPorta TimeSensor {
    cycleInterval 2 							#Demora 2 segundos a fechar a porta
	loop FALSE
}

#ligacao (angulos de rotacao para simular porta a abrir)
DEF rotacaoAbrirPorta OrientationInterpolator {
	key [0 0.5 1]
	keyValue [	0 1 0 0,
				0 1 0 -0.8,
				0 1 0 -1.57 ]
}

#ligacao (angulos de rotacao para simular porta a fechar)
DEF rotacaoFecharPorta OrientationInterpolator {
	key [0 0.5 1]
	keyValue [	0 1 0 -1.57,
				0 1 0 -0.8,
				0 1 0 0]
}

DEF TogglePorta Script {
	field  SFBool  aberta FALSE					#indica o estado da porta (TRUE se aberta ou FALSE se fechada)  
	eventIn  SFTime set_active					#funcao (retorna uma variavel do tipo Time)
	eventOut SFTime fecharPorta					#guarda o momento ("tempo") em que foi escolhido fechar a porta
	eventOut SFTime abrirPorta					#guarda o momento ("tempo") em que foi escolhido abrir a porta
	
	url "vrmlscript:
		function set_active ( b, curtime) {
			// ignore button releases
			if ( b == FALSE ) return;

			aberta = !aberta;					//inverte o estado da porta (aberta/fechada)
												
			if (aberta) {						//se porta aberta
				abrirPorta = curtime;			//actualizar tempo
				fecharPorta = -1;
			}
			else {								//se porta fechada
				abrirPorta = -1;				
				fecharPorta = curtime;			//actualizar tempo
			}
		}"
}


#quando pressionado sobre a porta (click)
ROUTE TouchPorta.touchTime TO TogglePorta.set_active 

#abrir porta
ROUTE TogglePorta.abrirPorta TO	timerAbrirPorta.startTime
ROUTE timerAbrirPorta.fraction_changed TO rotacaoAbrirPorta.set_fraction
ROUTE rotacaoAbrirPorta.value_changed TO porta.set_rotation

#fechar porta
ROUTE TogglePorta.fecharPorta TO timerFecharPorta.startTime
ROUTE timerFecharPorta.fraction_changed	TO rotacaoFecharPorta.set_fraction
ROUTE rotacaoFecharPorta.value_changed TO porta.set_rotation


